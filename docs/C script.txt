#include "apdefap.h"
typedef struct 
{
 char *property;
 char *value;
} CFG;
#define lineCount 36

static CFG dataCFG[lineCount]=
{
 //базовые параметры
 {"appPath",		"F:\\Projects\\Chemensk\\chemensk_17_11_2020_12_00\\chemensk\\userlib\\ReportWinCC\\bin\\Debug\\"}, //1 путь до приложения
 {"cfgFileName",		"cfg.txt"}, //2 Название конфигурационного файла
 {"startTime",		}, //3 Время от даты
 {"endTime",		}, //4 Время до даты
 {"index",		      }, //5 Индекс двухчасовой или дневной отчет
 {"startPointX",		"6"},  //6 начальная точка X
 {"startPointY",		"1"},  //7 начальная точка Y 
 {"delColumnNames",	"ID,Fingerprint,An5,An6,An7,An15,An16,An19,An21,An22,An23,An25,An26,An27,An28,An29,An30,An31,An32,An33"}, //8 Наименование удаляемых стобцов. БЕЗ ПРОБЕЛА ЧЕРЕЗ ЗАПЯТУЮ
 {"delimiter",		","},  //9 Делитель который указан в 6 пункте
 {"saveAs",			"F:\\excel\\"}, 	//10 Папка для сохранения файла
 {"serverName",		GetTagChar("@ServerName")}, 	//11 имя сервера
 {"dbName",			GetTagChar("@DatasourceNameRT")},//12 имя бд
 {"tableNameDaysTechnology",		"UA#Days"}, //13 Наименование таблиц в базе технологические дневные
 {"tableNameHoursTechnology",		"UA#Hours"}, //14 Наименование таблиц в базе технологические суточные
 {"tableNameDaysCounter",		"UA#Days_Counter"}, //15 Наименование таблиц в базе счетчиков дневные
 {"tableNameHoursCounter",		"UA#Hours_Counter"}, //16 Наименование таблиц в базе счетчиков суточные
 {"filter", }, //17 параметры фильтрации получаем с тега GetTagChar("Filter")
 {"queryType", }, //18 TEXNOLOG или COUNTER получение информации GET_INFO
 //базовые параметры конец
 // оформление
 {"header",			"TRUE"},  //19 заголовок таблицы header
 {"border",			"TRUE"}, //20 обводка border
 {"startTimeX",		"3"}, //21 координата х для записи начальной даты
 {"startTimeY",		"3"}, //22 координата y для записи начальной даты
 {"endTimeX",		"5"}, //23 координата x для записи конечной даты
 {"endTimeY",		"3"}, //24 координата y для записи конечной даты
 {"textTechH",		"Двухчасовой отчет по технологическим параметрам"}, //25
 {"textTechD",		"Суточный отчет по технологическим параметрам"}, //26
 {"textCountH",		"Двухчасовой отчет по параметрам счеткиков"}, //27
 {"textCountD",		"Суточный отчет по параметрам счеткиков"}, //28
 {"textX",		"2"}, //29 координата х для записи текста
 {"textY",		"2"}, //30 координата y для записи текста
 {"editFont",	"TRUE"}, //31
 {"font",		"Arial"}, //32
 {"fontSize",	"12"}, //33
 {"round",	"2"}, //34 округление числа после запятой
 // оформление конец
 //наименование ШАБЛОНА
 {"templateName",	"base_template.xlsx"}, //35
 {"sheetNumber",	"1"}, //36 страница в excel

};
void export_config(char* lpszPictureName, char* serverName, char* dbName, char* filter,char* reportType)
{
FILE *fp;
int i;
char tmpPath[256];
 //============================Получаем из формы чтобы не было проблем с кодировкой================================
dataCFG[2].value = GetPropChar(lpszPictureName,"FirstDate","Value");	//Return-Type: char* 
dataCFG[3].value = GetPropChar(lpszPictureName,"SecondDate","Value");
dataCFG[4].value = GetPropChar(lpszPictureName,"Combobox1","SelIndex");
dataCFG[10].value = serverName;
dataCFG[11].value = dbName;
dataCFG[16].value = filter;
dataCFG[17].value = reportType;
 //============================Получаем из формы чтобы не было проблем с кодировкой конец================================

 //============================Сохранение в файл ================================
    sprintf(tmpPath,"%s%s",dataCFG[0].value,dataCFG[1].value);
    fp = fopen (tmpPath, "w");
    for(i=0; i < lineCount; i++)
    {
	fprintf(fp,"%s:=%s\n",dataCFG[i].property,dataCFG[i].value);
    }
    fclose(fp);
  //============================Сохранение в файл конец ================================
sprintf(tmpPath,"%s%s",dataCFG[0].value,"exec.bat");
printf(tmpPath);
ProgramExecute(tmpPath);	//Return-Type: unsigned long int 
